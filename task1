#LEVEL 3 :Task 1 :Predictive Modeling

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Load the dataset
file_path = r'C:\Users\LENOVO\Downloads\Dataset .csv'  
try:
    df = pd.read_csv(file_path)
except FileNotFoundError:
    print("Error: The dataset file was not found. Please check the file path.")
    exit()

# Normalize column names
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('[^a-z0-9_]', '', regex=True)

# Ensure 'aggregate_rating' exists
if 'aggregate_rating' not in df.columns:
    print("Error: The 'aggregate_rating' column is missing in the dataset.")
    exit()

# Handle missing values
df.fillna({
    col: df[col].median() if df[col].dtype in ['int64', 'float64'] else df[col].mode()[0]
    for col in df.columns
}, inplace=True)

# Define target and features
target = 'aggregate_rating'
features = [col for col in df.columns if col != target]

X = df[features]
y = df[target]

# Identify categorical and numerical columns
categorical_cols = [col for col in X.columns if X[col].dtype == 'object']
numerical_cols = [col for col in X.columns if X[col].dtype in ['int64', 'float64']]

# Preprocessing for numerical and categorical features
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_cols),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
    ]
)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define models to compare
models = {
    'Linear Regression': Pipeline(steps=[('preprocessor', preprocessor),
                                         ('model', LinearRegression())]),
    'Decision Tree': Pipeline(steps=[('preprocessor', preprocessor),
                                      ('model', DecisionTreeRegressor(random_state=42))]),
    'Random Forest': Pipeline(steps=[('preprocessor', preprocessor),
                                      ('model', RandomForestRegressor(random_state=42, n_estimators=100))])
}

# Train and evaluate each model
results = {}
for name, pipeline in models.items():
    print(f"\nTraining {name}...")
    pipeline.fit(X_train, y_train)
    y_pred = pipeline.predict(X_test)
    
    # Calculate metrics
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    
    # Store results
    results[name] = {'MSE': mse, 'MAE': mae, 'R2': r2}
    
    print(f"Results for {name}:")
    print(f"Mean Squared Error: {mse:.4f}")
    print(f"Mean Absolute Error: {mae:.4f}")
    print(f"R2 Score: {r2:.4f}")

# Compare models
results_df = pd.DataFrame(results).T
print("\nModel Performance Comparison:")
print(results_df)
